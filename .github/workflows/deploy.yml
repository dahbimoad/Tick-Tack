name: Deploy to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tick-tack-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd Server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tick-tack-frontend
        IMAGE_TAG: ${{ github.sha }}
        BACKEND_URL: http://tick-tack-backend-service.internal:3001
      run: |
        cd Client
        # Set environment variable for production build
        echo "VITE_API_URL=$BACKEND_URL/api/time" > .env.production
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition templates
      run: |
        aws ecs describe-task-definition --task-definition tick-tack-backend --query taskDefinition > task-definition-backend.json
        aws ecs describe-task-definition --task-definition tick-tack-frontend --query taskDefinition > task-definition-frontend.json
    
    - name: Fill in the new backend image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-backend.json
        container-name: tick-tack-backend
        image: ${{ steps.build-backend.outputs.image }}
    
    - name: Fill in the new frontend image ID in the Amazon ECS task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-frontend.json
        container-name: tick-tack-frontend
        image: ${{ steps.build-frontend.outputs.image }}
    
    - name: Deploy Amazon ECS backend task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: tick-tack-backend-service
        cluster: tick-tack-cluster
        wait-for-service-stability: true
    
    - name: Deploy Amazon ECS frontend task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: tick-tack-frontend-service
        cluster: tick-tack-cluster
        wait-for-service-stability: true